<!-- Chess Modal -->
<div class="modal fade" id="chessModal" tabindex="-1" aria-labelledby="chessModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="chessModalLabel">CLI Chess</h5>
        <a role="button" class="btn-close" data-dismiss="modal" aria-label="Close">
          <span class="fas fa-times"></span>
        </a>
      </div>
      <div class="modal-body">
        <p>
          The aim of this project was to bring together everything I had learnt about Ruby so far by building a complex piece of software, in the form of two player chess.
        </p>
        <p>
          The project incorporated almost all of my learning so far. From Classes, Modules and Inheritance; to Testing, Object Oriented Design and Serialization.
          It’s built in pure Ruby and played via the command line. 
        </p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-outline-primary" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- Facey Modal -->
<div class="modal fade" id="faceyModal" tabindex="-1" aria-labelledby="faceyModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="faceyModalLabel">Social Media App</h5>
        <a role="button" class="btn-close" data-dismiss="modal" aria-label="Close">
          <span class="fas fa-times"></span>
        </a>
      </div>
      <div class="modal-body">
        <p>
          This project's aim was to bring together all that I'd learned about Rails so far.
          It incorporates all the core aspects of Rails; associations, routing, validations etc 
        </p>
        <p>
          The task given was to produce a social media app with secure sign in and OAuth sign in via Facebook. Emails are sent on sign up, using Gmail in production.
          Users can create posts, comment on posts and 'like' them. Users also have the ability to upload pictures.
          In production AWS supports this. 
        </p>
        <p>
          Users can 'friend' each other via associations. Notifications are provided for friend requests.
          Users also have a timeline and a users page to look for friends.
        </p>
        <p>
          I introduced a test suite utilising RSpec, FactoryBot and Faker; taking a BDD approach with Model and Request specs.
        </p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-outline-primary" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- Hangman Modal -->
<div class="modal fade" id="hangmanModal" tabindex="-1" aria-labelledby="hangmanModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="chessModalLabel">Hangman 2.0 CLI Game</h5>
        <a role="button" class="btn-close" data-dismiss="modal" aria-label="Close">
          <span class="fas fa-times"></span>
        </a>
      </div>
      <div class="modal-body">
        <p>
          The primary aim for this project was to develop a piece of software with a TDD approach and attempt to 
          obtain 100% test coverage whilst cemementing my knowledge of RSpec.
        </p>
        <p>
          I opted to remake a previous project as I thought it would also be interesting to compare this approach with my first attempt.
          The primary focus of the initial project was to incorporate serialization via game saves.
        </p>
        <p>
          I began with a strict TDD approach but as some concepts grew in complexity, such as with the ‘guess logic’, I adapted to BDD to gain a greater understanding of what may be the best approach to implement certain features.
          In the end I managed to obtain 99% test coverage (simplecov gem).
          I was also pleased with the progress in my Object-Oriented Design when comparing this project with my first attempt.
          My code was a lot more modular this time around and I used refactoring more effectively to identify areas for abstraction into new classes. 
        </p>
        <p>
          I also used this as an opportunity to learn the process of turning a Ruby project into a Gem.
        </p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-outline-primary" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<h1 id="home"></h1>
<section class="container">
  <%= render 'home' %>
</section>

<h1 id="about">About me.</h1>
<section class="container">
  <%= render 'about' %>
</section>

<h1 id="projects">Projects</h1>
<main class='container'>
  <%= render 'projects' %>
</main>

<div class="d-flex justify-content-center mt-3">
  <%= link_to 'All Projects', projects_path, class: 'btn btn-primary text-center' %>
</div>

<h1 id="contact">Contact Info</h1>
<p>Email address</p>
<p>Github</p>
<%= image_tag "https://www.codewars.com/users/bendee/badges/micro", alt: 'Codewars Badge' %>

