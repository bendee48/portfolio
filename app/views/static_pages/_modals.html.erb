<!-- Chess Modal -->
<div class="modal fade" id="chessModal" tabindex="-1" aria-labelledby="chessModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="chessModalLabel">CLI Chess</h5>
        <a role="button" class="btn-close" data-dismiss="modal" aria-label="Close">
          <span class="fas fa-times"></span>
        </a>
      </div>
      <div class="modal-body">
        <p>
          The aim of this project was to bring together everything I had learnt about Ruby so far by building a complex piece of software, in the form of two player chess.
        </p>
        <p>
          The project incorporated almost all of my learning so far. From Classes, Modules and Inheritance; to Testing, Object Oriented Design and Serialization.
          It’s built in pure Ruby and played via the command line. 
        </p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-outline-primary" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- Facey Modal -->
<div class="modal fade" id="faceyModal" tabindex="-1" aria-labelledby="faceyModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="faceyModalLabel">Social Media App</h5>
        <a role="button" class="btn-close" data-dismiss="modal" aria-label="Close">
          <span class="fas fa-times"></span>
        </a>
      </div>
      <div class="modal-body">
        <p>
          This project's aim was to bring together all that I'd learned about Rails so far.
          It incorporates all the core aspects of Rails; associations, routing, validations etc 
        </p>
        <p>
          The task given was to produce a social media app with secure sign in and OAuth sign in via Facebook. Emails are sent on sign up, using Gmail in production.
          Users can create posts, comment on posts and 'like' them. Users also have the ability to upload pictures.
          In production AWS supports this. 
        </p>
        <p>
          Users can 'friend' each other via associations. Notifications are provided for friend requests.
          Users also have a timeline and a users page to look for friends.
        </p>
        <p>
          I introduced a test suite utilising RSpec, FactoryBot and Faker; taking a BDD approach with Model and Request specs.
        </p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-outline-primary" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- Hangman Modal -->
<div class="modal fade" id="hangmanModal" tabindex="-1" aria-labelledby="hangmanModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="hangmanModalLabel">Hangman 2.0 CLI Game</h5>
        <a role="button" class="btn-close" data-dismiss="modal" aria-label="Close">
          <span class="fas fa-times"></span>
        </a>
      </div>
      <div class="modal-body">
        <p>
          The primary aim for this project was to develop a piece of software with a TDD approach and attempt to 
          obtain 100% test coverage whilst cemementing my knowledge of RSpec.
        </p>
        <p>
          I opted to remake a previous project as I thought it would also be interesting to compare this approach with my first attempt.
          The primary focus of the initial project was to incorporate serialization via game saves.
        </p>
        <p>
          I began with a strict TDD approach but as some concepts grew in complexity, such as with the ‘guess logic’, I adapted to BDD to gain a greater understanding of what may be the best approach to implement certain features.
          In the end I managed to obtain 99% test coverage (simplecov gem).
          I was also pleased with the progress in my Object-Oriented Design when comparing this project with my first attempt.
          My code was a lot more modular this time around and I used refactoring more effectively to identify areas for abstraction into new classes. 
        </p>
        <p>
          I also used this as an opportunity to learn the process of turning a Ruby project into a Gem.
        </p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-outline-primary" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- Todo Modal -->
<div class="modal fade" id="todoModal" tabindex="-1" aria-labelledby="todoModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="todoModalLabel">Todo App</h5>
        <a role="button" class="btn-close" data-dismiss="modal" aria-label="Close">
          <span class="fas fa-times"></span>
        </a>
      </div>
      <div class="modal-body">
        <p>
          This project was completed with vanilla JavaScript, HTML and CSS.
        </p>
        <p>
          The primary aim for the project was to bring together my knowledge of JavaScript so far.
        </p>
        <p>
          This involved my learning around Classes, Objects, Modules, Factories, DOM manipulation and Constructors.
          As well as making use of webpack, it also incorporates learnt design patterns, such as the Observer pattern.
        </p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-outline-primary" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- Overtime Modal -->
<div class="modal fade" id="overtimeModal" tabindex="-1" aria-labelledby="overtimeModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="overtimeModalLabel">A business overtime app</h5>
        <a role="button" class="btn-close" data-dismiss="modal" aria-label="Close">
          <span class="fas fa-times"></span>
        </a>
      </div>
      <div class="modal-body">
        <p>
          This project looked at building a Rails App with a TDD/BDD approach.
        </p>
        <p>
          The premise of the project was taken from a tutorial and along with the standard Rails practices 
          I was introduced to a few new concepts primarily through gems, such as the use of Pundit and Administrate to
          produce an app with defined roles and access to certain features for users.
        </p>
        <p>
          The main aim though was to produce a well tested app. For this I used RSpec, FactoryBot, Faker,
          Database Cleaner and Capybara for Model and Feature specs. I primarily adopted a TDD approach, writing tests first
          and then implementing features through the Red, Green, Refactor cycle. I moved to BDD when I wasn't 100% sure how to
          go about implementing a certain feature which allowed me to play around first with a few methods before settling on an approach.
        </p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-outline-primary" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- Calculator Modal -->
<div class="modal fade" id="calculatorModal" tabindex="-1" aria-labelledby="calculatorModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="calculatorModalLabel">Javascript Calculator</h5>
        <a role="button" class="btn-close" data-dismiss="modal" aria-label="Close">
          <span class="fas fa-times"></span>
        </a>
      </div>
      <div class="modal-body">
        <p>
          This project brought together the JavaScript fundamentals I had learnt so far; functions, methods, data structures and working with the DOM.
        </p>
        <p>
          The calculator has all the standard functions of any calculator; addition, subtraction, multiplication and subtraction.
          Decimals and negative numbers can also be used.
        </p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-outline-primary" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- Mastermind Sinatra Modal -->
<div class="modal fade" id="mastermindSinatraModal" tabindex="-1" aria-labelledby="mastermindSinatraModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="mastermindSinatraModalLabel">Mastermind Sinatra Game</h5>
        <a role="button" class="btn-close" data-dismiss="modal" aria-label="Close">
          <span class="fas fa-times"></span>
        </a>
      </div>
      <div class="modal-body">
        <p>
          This project took an exisitng Ruby cli app I produced and turned it into a Sinatra app.
        </p>
        <p>
          The main aim was to take a look at Sinatra and to produce a web app without as much hand-holding as Rails.
          I used an existing Ruby app I made, the game Mastermind, so I already had the game logic in place.
          It was just a matter of hooking this up to a web interface and adding a little styling.
        </p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-outline-primary" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>